#FIRST THING TO DO IS INSTALL EVERYTHING, "pip install pygame, pip install colorama" - DO THIS IN THE CONSOLE PLEASE!!!!!!!!!
########## - READ THE FIRST LINE
####### - READ THE FIRST LINE
######## - READ THE FIRST LINE

import time
import sys
import random
import os
from colorama import Fore, Style, init
import tkinter as tk
import pygame
import select
from enum import Enum

init(autoreset=True)

class Difficulty:
    def __init__(self, iq_gain, iq_loss, starting_iq, questions):
        self.iq_gain = iq_gain
        self.iq_loss = iq_loss
        self.starting_iq = starting_iq
        self.questions = questions

Difficulty.EASY = Difficulty(15, 3, 120, "easy")
Difficulty.NORMAL = Difficulty(10, 5, 100, "normal")
Difficulty.HARD = Difficulty(5, 10, 80, "hard")

class GameState:
    def __init__(self):
        global inventory
        self.inventory = inventory
        self.iq = 100
        self.completed_paths = {
            "darlingtonpark": {
                "completed": False,
                "areas": {
                    "hiking_trail": False,
                    "waterfront": False,
                    "visitor_center": False,
                    "campground": False
                }
            },
            "foodland": {
                "completed": False,
                "areas": {
                    "produce_section": False,
                    "bakery": False,
                    "deli_counter": False,
                    "freezer_section": False
                }
            },
            "timhortons": {
                "completed": False,
                "areas": {
                    "front_counter": False,
                    "dining_area": False,
                    "drive_thru": False,
                    "back_room": False
                }
            },
            "community": {
                "completed": False,
                "areas": {
                    "pool_area": False,
                    "gym": False,
                    "courts": False,
                    "locker_room": False
                }
            }
        }
        self.current_thief = None
        self.difficulty = Difficulty.NORMAL
        self.high_scores = self.load_high_scores()
        self.achievements = set()
        self.player_name = ""
        
    def load_high_scores(self):
        try:
            with open("highscores.txt", "r") as f:
                return [line.strip().split(",") for line in f.readlines()]
        except (FileNotFoundError, IOError, ValueError):
            return []
            
    def save_high_score(self, name, score):
        try:
            self.high_scores.append([name, str(score)])
            self.high_scores.sort(key=lambda x: int(x[1]), reverse=True)
            self.high_scores = self.high_scores[:10]
            with open("highscores.txt", "w") as f:
                for name, score in self.high_scores:
                    f.write(f"{name},{score}\n")
        except Exception as e:
            type_writter(f"Error saving high score: {e}", color=Fore.RED)

import time
import sys
import random
import os
from colorama import Fore, Style, init
import tkinter as tk

init(autoreset=True)

class SettingsWindow:
    def __init__(self, game_state):
        self.game_state = game_state
        self.root = tk.Tk()
        self.root.title("Game Settings")
        
        self.inv_label = tk.Label(self.root, text="Inventory:")
        self.inv_label.pack()
        self.inv_listbox = tk.Listbox(self.root, width=30, height=10)
        self.inv_listbox.pack(padx=10, pady=5)
        self.update_inventory()
        
    def update_inventory(self):
        try:
            self.inv_listbox.delete(0, tk.END)
            for item in inventory:
                self.inv_listbox.insert(tk.END, item)
        except tk.TclError:
            return
        self.root.after(1000, self.update_inventory)

inventory = []
special_items = {
    "Map Piece": {"desc": "Fragment of the thief's hideout map", "use": "Reveals secret paths"},
    "Coffee Beans": {"desc": "Might help wake someone up", "use": "Trades for info or wakes NPCs"},
    "Flashlight": {"desc": "For dark areas", "use": "Explore dark areas safely"},
    "Master Key": {"desc": "Opens locked doors", "use": "Bypasses challenges"},
    "Energy Drink": {"desc": "Restores 20 IQ", "use": "One-time IQ boost"},
    "Compass": {"desc": "Helps navigation", "use": "Prevents lost penalties"},
    "Wildlife Guide": {"desc": "Animal info", "use": "Helps nature questions"},
    "Lucky Lure": {"desc": "Brings fortune", "use": "Extra chance on hard questions"},
    "Maple Seeds": {"desc": "Plant specimen", "use": "Trade for info"},
    "Whistle": {"desc": "Loud noise", "use": "Call help or distract"},
    "Sandwich": {"desc": "Fresh food", "use": "Restore 10 IQ"},
    "Espresso": {"desc": "Strong coffee", "use": "Temporary IQ boost"},
    "Discount Card": {"desc": "Store card", "use": "Better trades"}
}

characters = {
    "Principal": "Your worried school principal",
    "Mysterious Stranger": "Offers questionable help",
    "Janitor": "Knows school secrets",
    "Librarian": "Tough trivia master" 
}

def show_inventory():
    if inventory:
        type_writter("\nYour Inventory:", speed=0.02, color=Fore.CYAN)
        for item in inventory:
            type_writter(f"- {item}", speed=0.02, color=Fore.CYAN)
        
        type_writter("\nUse an item? (Y/N)", speed=0.02)
        if input(Fore.YELLOW + "> ").lower() == 'y':
            type_writter("\nWhich item? (Type name or 'cancel')", speed=0.02)
            item = input(Fore.YELLOW + "> ").lower()
            if item == 'cancel':
                return False, None
            for inv_item in inventory:
                if inv_item.lower() == item:
                    return True, inv_item
            type_writter("Item not found!", color=Fore.RED)
    else:
        type_writter("Your inventory is empty.", speed=0.02, color=Fore.CYAN)
    return False, None

def countdown(seconds, message=""):
    type_writter(message, speed=0.02, color=Fore.YELLOW)
    for i in range(seconds, 0, -1):
        print(Fore.RED + f"{i}...", end=" ", flush=True)
        time.sleep(1)
    print("\n")

def type_writter(text, speed=0.05, color=Fore.WHITE):
    for char in text:
        sys.stdout.write(color + char)
        sys.stdout.flush()
        time.sleep(speed)
    print(Style.RESET_ALL)

def pause_line():
    print("\n")
    input(Fore.YELLOW + "Press Enter to continue...")

def clear_system():
    os.system("cls" if os.name == "nt" else "clear")

fail_messages = [
    "Nope. Not even close.",
    "Wow, that was... bad.",
    "Yikes. Try again.",
    "Oof. Wrong answer.",
    "Nah, that's not it.",
    "Seriously? That's your answer?",
    "Bzzzt! Wrong.",
    "Nope. Not your day, is it?",
    "Wrong. Like, really wrong.",
    "Nah. Maybe next time."
]

def get_fail_message():
    return random.choice(fail_messages)

pass_message = "Correct! Your IQ has increased."

def adjust_iq(correct, iq, game_state):
    if correct:
        iq += game_state.difficulty.iq_gain
    else:
        iq -= game_state.difficulty.iq_loss
    return iq

geography_questions = [
    ("What is the capital of France?", "Paris"),
    ("What is the capital of Japan?", "Tokyo"),
    ("What is the largest country by area?", "Russia"),
    ("What is the capital of Australia?", "Canberra"),
    ("Which continent is Egypt in?", "Africa"),
    ("What is the longest river in the world?", "Nile"),
    ("What ocean is between North America and Europe?", "Atlantic"),
    ("What is the smallest country in the world?", "Vatican City"),
    ("What is the capital of Brazil?", "Brasilia"),
    ("What mountain range runs through South America?", "Andes")
]

math_questions = [
    ("15 + 27?", "42"),
    ("144 ÷ 12?", "12"),
    ("13 × 13?", "169"),
    ("√144?", "12"),
    ("500 - 127?", "373"),
    ("7 × 8?", "56"),
    ("1000 ÷ 25?", "40"),
    ("17 + 38?", "55"),
    ("256 ÷ 16?", "16"),
    ("11 × 12?", "132")
]

science_questions = [
    ("H2O is?", "water"),
    ("Closest planet to sun?", "mercury"),
    ("Hardest natural substance?", "diamond"),
    ("Largest planet?", "jupiter"),
    ("Chemical symbol for gold?", "au"),
    ("Gas plants absorb?", "carbon dioxide"),
    ("Speed of light?", "299792458"),
    ("Closest star to Earth?", "sun"),
    ("Study of fossils?", "paleontology"),
    ("Most abundant atmospheric gas?", "nitrogen")
]

history_questions = [
    ("First US president?", "george washington"),
    ("WWII end year?", "1945"),
    ("Painted Mona Lisa?", "leonardo da vinci"),
    ("First moon walker?", "neil armstrong"),
    ("Titanic sank year?", "1912"),
    ("First UK female PM?", "margaret thatcher"),
    ("WWI began year?", "1914"),
    ("Wrote Romeo and Juliet?", "william shakespeare"),
    ("Ancient wonder in Egypt?", "pyramids"),
    ("First Chinese emperor?", "qin shi huang")
]

riddles = [
    ("Speak without mouth, hear without ears?", "echo"),
    ("Has keys but no locks?", "piano"),
    ("Cities but no houses?", "map"),
    ("Goes up never down?", "age"),
    ("Hands but can't clap?", "clock"),
    ("Gets wetter as it dries?", "towel"),
    ("Face, two hands, no arms/legs?", "clock"),
    ("Always ahead but unseen?", "future"),
    ("Grows when you take away?", "hole"),
    ("Teeth but can't bite?", "comb")
]

tim_hortons = [
    ("Most popular donut?", "honey cruller"),
    ("Founded year?", "1964"),
    ("Loyalty program?", "rewards"),
    ("Signature coffee?", "original blend"),
    ("Breakfast sandwich?", "breakfast sandwich"),
    ("Iced coffee name?", "iced capp"),
    ("Donut holes name?", "timbits"),
    ("Hot chocolate name?", "hot chocolate"),
    ("Tea name?", "steeped tea"),
    ("Soup name?", "chicken noodle")
]

sports = [
    ("'King of sports'?", "soccer"),
    ("Played at Wimbledon?", "tennis"),
    ("Uses a puck?", "hockey"),
    ("'America's pastime'?", "baseball"),
    ("Ball and hoop game?", "basketball"),
    ("Played on diamond?", "baseball"),
    ("Uses shuttlecock?", "badminton"),
    ("Played on pitch?", "cricket"),
    ("Bat and ball game?", "cricket"),
    ("Racket and ball game?", "tennis")
]

tim_hortons.extend([
    ("Most popular coffee size?", "medium"),
    ("Potato wedges name?", "wedges"),
    ("Logo color?", "red"),
    ("Burger King merger year?", "2014"),
    ("Rewards program?", "tims rewards"),
    ("Tim Horton's birthplace?", "canada"),
    ("Tim Horton's sport?", "hockey"),
    ("'Double Double' is?", "coffee"),
    ("Frozen coffee drink?", "iced capp"),
    ("Original donut price?", "69 cents")
])


sports.extend([
    ("Basketball hoop diameter?", "18 inches"),
    ("Soccer team players?", "11"),
    ("Basketball origin country?", "canada"),
    ("Hockey periods?", "3"),
    ("Olympic pool length?", "50 meters"),
    ("Touchdown points?", "6"),
    ("Tennis ball color?", "yellow"),
    ("Baseball innings?", "9"),
    ("Sport with 'love'?", "tennis"),
    ("Madison Square Garden sport?", "basketball")
])

def fight(enemy, iq, game_state):
    player_hp = enemy_hp = 100
    
    type_writter(f"Fight with {enemy}!", color=Fore.RED)
    pause_line()

    while player_hp > 0 and enemy_hp > 0:
        type_writter(f"You: {player_hp} HP", color=Fore.GREEN)
        type_writter(f"{enemy}: {enemy_hp} HP", color=Fore.RED)
        space()

        q, a = random.choice(geography_questions + math_questions + 
                           science_questions + history_questions + riddles)
        type_writter(q, color=Fore.CYAN)
        
        if input(Fore.YELLOW + "Answer: ").lower() == a.lower():
            type_writter("Hit! -20 HP", color=Fore.GREEN)
            enemy_hp -= 20
        else:
            type_writter(f"{random.choice(fail_messages)} Correct: {a}", color=Fore.RED)
            type_writter("-20 HP", color=Fore.RED)
            player_hp -= 20

        pause_line()
        clear_system()

    if player_hp <= 0:
        type_writter("💀 Defeated! Thief escaped.", color=Fore.RED)
        return False, iq
    else:
        type_writter(f"🌟 Defeated {enemy}! Got clue!", color=Fore.GREEN)
        return True, iq


# Intro with ASCII art
def intro(name, game_state):
    # Add skip option
    type_writter("Press ENTER to watch intro or type 'skip' to begin:", speed=0.02)
    if input(Fore.YELLOW + "> ").lower() != 'skip':
        type_writter(r"""
                     
░▒▓███████▓▒░░▒▓█▓▒░▒▓███████▓▒░░▒▓█▓▒░      ░▒▓██████▓▒░░▒▓██████████████▓▒░ ░▒▓██████▓▒░       ░▒▓█▓▒░░▒▓█▓▒░▒▓████████▓▒░▒▓█▓▒░░▒▓███████▓▒░▒▓████████▓▒░ 
░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░▒▓█▓▒░         ░▒▓█▓▒░     
░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░▒▓█▓▒░         ░▒▓█▓▒░     
░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░▒▓███████▓▒░░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓████████▓▒░      ░▒▓████████▓▒░▒▓██████▓▒░ ░▒▓█▓▒░░▒▓██████▓▒░   ░▒▓█▓▒░     
░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░      ░▒▓█▓▒░  ░▒▓█▓▒░     
░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░      ░▒▓█▓▒░  ░▒▓█▓▒░     
░▒▓███████▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓████████▓▒░▒▓██████▓▒░░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓████████▓▒░▒▓█▓▒░▒▓███████▓▒░   ░▒▓█▓▒░     
    """, speed=0.01)
        space()
        type_writter(f"Welcome, {name}, to the Courtice Diploma Heist!", speed=0.02)
        type_writter("It's graduation day at Courtice Secondary School, but your diploma has been stolen!", speed=0.02)
        type_writter("You must track down the thief and recover your diploma before the ceremony ends.", speed=0.02)
        pause_line()


    


# Difficulty selection
type_writter("\nDifficulty:")
type_writter("1. Easy (+15/-3 IQ)", color=Fore.GREEN)
type_writter("2. Normal (+10/-5)", color=Fore.YELLOW)
type_writter("3. Hard (+5/-10)", color=Fore.RED)

while True:
    choice = input(Fore.YELLOW + "Choose (1-3): ")
    if choice == '1': game_state.difficulty = Difficulty.EASY; break
    elif choice == '2': game_state.difficulty = Difficulty.NORMAL; break
    elif choice == '3': game_state.difficulty = Difficulty.HARD; break
    else: type_writter("Invalid!", color=Fore.RED)

clear_system()

# Game state
completed_paths = {
    "darlingtonpark": False,
    "foodland": False,
    "timhortons": False,
    "community": False
}

thieves = {
    "Jordan": {
        "name": "Academic Jordan",
        "motive": "Wants valedictorian",
        "location": "Library",
        "weakness": "Coffee",
        "strength": "Math",
        "item": "Records"
    },
    "Alex": {
        "name": "Athlete Alex",
        "motive": "Revenge for captain",
        "location": "Gym",
        "weakness": "Energy Drink",
        "strength": "Sports",
        "item": "Trophy"
    },
    "Morgan": {
        "name": "Hacker Morgan",
        "motive": "Changing grades",
        "location": "Computer Lab",
        "weakness": "Master Key",
        "strength": "Science",
        "item": "USB"
    }
}

def get_question(question_set, difficulty):
    q, a = random.choice(question_set)
    if difficulty.questions == "easy":
        return f"{q} (Hint: {a[0]})", a
    elif difficulty.questions == "hard":
        return f"{q} (No hints)", a
    return q, a

def start_adventure(game_state):
    thief = random.choice(list(thieves.keys()))
    game_state.current_thief = thief
    
    countdown(5, "ALERT: Diploma stolen! Starting in...")
    type_writter(f"{thieves[thief]['name']} took your diploma!")
    type_writter(f"Reason: {thieves[thief]['motive']}", color=Fore.YELLOW)

    while not all(game_state.completed_paths.values()):
        type_writter("\nLocations:")
        for i, loc in enumerate([l for l in game_state.completed_paths if not game_state.completed_paths[l]], 1):
            type_writter(f"{i}. {loc.title()}", color=Fore.CYAN)

# Location selection
status_num = len(available_locations) + 1
type_writter(f"{status_num}. Check Status", color=Fore.YELLOW)
type_writter("('minigame' for random game)", color=Fore.YELLOW)

choice = input(Fore.YELLOW + "\nChoose (or 'inventory'/'minigame'): ").lower()

if choice == "minigame":
    bonus = play_random_minigame()
    if bonus > 0:
        type_writter(f"+{bonus} IQ!", color=Fore.GREEN)
        game_state.iq += bonus
    pause_line()
    clear_system()
    continue

if choice == "inventory":
    show_inventory()
    continue

if iq != game_state.iq:
    game_state.iq = iq

try:
    choice = int(choice)
    if choice == status_num:
        show_iq_status(iq)
        continue
    elif 1 <= choice <= len(available_locations):
        loc = available_locations[choice-1]
        if loc == "darlingtonpark":
            iq = darlington_park(iq, game_state)
            game_state.completed_paths["darlingtonpark"] = True
        elif loc == "foodland":
            iq = foodland(iq, game_state)
            game_state.completed_paths["foodland"] = True
        elif loc == "timhortons":
            iq = tim_hortons(iq, game_state)
            game_state.completed_paths["timhortons"] = True
        elif loc == "community":
            iq = community_complex(iq, game_state)
            game_state.completed_paths["community"] = True
    else:
        print(Fore.RED + "Invalid!")
except ValueError:
    if choice not in ["inventory", "minigame"]:
        print(Fore.RED + "Invalid!")
    continue

if iq < 50:
    type_writter("💀 IQ too low! Thief wins.", color=Fore.RED)
    return

remaining = sum(not x for x in game_state.completed_paths.values())
if remaining > 0:
    type_writter(f"\n{remaining} locations left!", color=Fore.YELLOW)
    pause_line()
    clear_system()

type_writter("All locations done! Confront thief!", color=Fore.YELLOW)
pause_line()
iq = confront_thief(game_state)

if iq < 50:
    type_writter("💀 IQ too low! Thief wins.", color=Fore.RED)
    return

determine_ending(game_state)

def random_event(iq, inventory):
    events = [
        {"desc": "Mysterious stranger...", 
         "result": ["Gives energy drink!", "Steals IQ!"],
         "item": "Energy Drink",
         "iq": (0, -10)},
        {"desc": "Hidden cache found...",
         "result": ["Got item!", "It's a trap!"],
         "item": "Lucky Lure",
         "iq": (0, -5)},
        {"desc": "Pop quiz!",
         "result": ["Aced it!", "Failed!"],
         "item": None,
         "iq": (15, -10)}
    ]
    
    if random.random() < 0.3:
        event = random.choice(events)
        type_writter(event["desc"], color=Fore.YELLOW)
        pause_line()
        
        if random.random() < 0.5:
            type_writter(event["result"][0], color=Fore.GREEN)
            if event["item"]:
                inventory.append(event["item"])
            iq += event["iq"][0]
        else:
            type_writter(event["result"][1], color=Fore.RED)
            iq += event["iq"][1]
            
    return iq

def darlington_park(iq, game_state):
    locations = {
        "hiking_trail": {
            "desc": "Forest trail...",
            "questions": geography_questions,
            "rewards": ["Compass", "Map Piece"]
        },
        "waterfront": {
            "desc": "Lake shore...",
            "questions": science_questions,
            "rewards": ["Lucky Lure", "Flashlight"]
        }
    }
    return explore_location(iq, game_state, locations, "Darlington Park")

def foodland(iq, game_state):
    locations = {
        "produce_section": {
            "desc": "Fruits and veggies...",
            "questions": science_questions,
            "rewards": ["Energy Drink", "Sandwich"]
        }
    }
    return explore_location(iq, game_state, locations, "Foodland")





def foodland(iq, game_state):
    locations = {
        "bakery": {
            "desc": "Fresh bread smell...",
            "questions": math_questions,
            "rewards": ["Sandwich", "Coffee"]
        },
        "deli": {
            "desc": "Meats and cheeses...",
            "questions": history_questions,
            "rewards": ["Sandwich", "Energy"]
        },
        "freezer": {
            "desc": "Chilly frozen section...",
            "questions": riddles,
            "rewards": ["Ice Pack", "Clue"]
        }
    }
    return explore_location(iq, game_state, locations, "Foodland")

def tim_hortons(iq, game_state):
    locations = {
        "counter": {
            "desc": "Busy order area...",
            "questions": tim_hortons,
            "rewards": ["Coffee", "Espresso"]
        },
        "dining": {
            "desc": "Customers eating...",
            "questions": riddles,
            "rewards": ["Note", "Energy"]
        },
        "drive_thru": {
            "desc": "Line of cars...",
            "questions": math_questions,
            "rewards": ["Receipt", "Coffee"]
        }
    }
    return explore_location(iq, game_state, locations, "Tim Hortons")

def community(iq, game_state):
    locations = {
        "pool": {
            "desc": "Chlorine smell...",
            "questions": sports,
            "rewards": ["Key", "Whistle"]
        },
        "gym": {
            "desc": "Exercise equipment...",
            "questions": science_questions,
            "rewards": ["Energy", "Protein"]
        },
        "courts": {
            "desc": "Basketball courts...",
            "questions": sports,
            "rewards": ["Schedule", "Whistle"]
        }
    }
    return explore_location(iq, game_state, locations, "Community")

def explore_location(iq, game_state, locations, loc_name):
    while iq >= 50:
        type_writter(f"\n{loc_name} areas:", speed=0.02)
        loc_key = loc_name.lower().replace(" ", "")
        
        areas = game_state.completed_paths[loc_key]["areas"]
        available = [a for a in areas if not areas[a]]
        
        for i, area in enumerate(available, 1):
            type_writter(f"{i}. {area.replace('_', ' ')}", color=Fore.CYAN)
            
        type_writter(f"{len(available)+1}. Leave", color=Fore.YELLOW)
        
        choice = input(Fore.YELLOW + "\nChoose: ").lower()
        
        if choice == 'minigame':
            bonus = play_minigame()
            if bonus > 0:
                iq += bonus
                game_state.iq = iq
            continue
            
        if choice == str(len(available)+1):
            break
            
        try:
            current = available[int(choice)-1]
        except:
            type_writter("Invalid!", color=Fore.RED)
            continue
            
        clear_system()
        type_writter(f"\n{locations[current]['desc']}")
        
        correct = 0
        while correct < 3:
            q, a = get_question(locations[current]['questions'], game_state.difficulty)
            type_writter("\n" + q, color=Fore.CYAN)
            
            if input(Fore.YELLOW + "Answer: ").lower() == a.lower():
                reward = random.choice(locations[current]['rewards'])
                inventory.append(reward)
                type_writter(f"Got {reward}!", color=Fore.GREEN)
                iq = adjust_iq(True, iq, game_state)
                correct += 1
            else:
                iq = adjust_iq(False, iq, game_state)
                
            game_state.iq = iq
            type_writter(f"IQ: {iq}", color=Fore.YELLOW)
            
            if iq < 50:
                return iq
                
            pause_line()
            clear_system()
        
        areas[current] = True
        
        if random.random() < 0.4:
            win, iq = fight("Enemy", iq, game_state)
            
    return iq

def confront_thief(game_state):
    thief = thieves[game_state.current_thief]
    # ... rest of function ...

def confront_thief(game_state):
    countdown(3, "Final showdown...")
    pause_line()
    
    thief = thieves[game_state.current_thief]
    
    if thief['weakness'] in inventory:
        type_writter(f"Used {thief['weakness']} on {thief['name']}!", color=Fore.GREEN)
        type_writter("They surrender!", speed=0.02)
        game_state.iq += 30
    elif "Map Piece" in inventory and inventory.count("Map Piece") >= 2:
        type_writter("Found their hideout with map!", color=Fore.GREEN)
        game_state.iq += 20
    elif "Whistle" in inventory:
        type_writter("Whistle alerted help!", color=Fore.CYAN)
        game_state.iq += 15
    else:
        q, a = random.choice(math_questions if thief['strength'] == "Math" 
                           else sports if thief['strength'] == "Sports" 
                           else science_questions)
        type_writter(q, color=Fore.CYAN)
        if input(Fore.YELLOW + "Answer: ").lower() == a.lower():
            type_writter("Challenge won!", color=Fore.GREEN)
            game_state.iq += 25
        else:
            type_writter("Lost challenge", color=Fore.RED)
            game_state.iq -= 10

    inventory.append(thief['item'])
    type_writter("Got your diploma!", color=Fore.GREEN)
    return game_state.iq

def ending(game_state):
    type_writter("\nResults:", color=Fore.YELLOW)
    
    if "Energy Drink" in inventory:
        game_state.iq += 20
    if "Lucky Lure" in inventory:
        game_state.iq += 10
        
    type_writter(f"\nFinal IQ: {game_state.iq}", color=Fore.MAGENTA)
    
    if game_state.iq >= 150:
        type_writter("🌟 Valedictorian!", color=Fore.GREEN)
    elif game_state.iq >= 100:
        type_writter("🎉 Honors grad", color=Fore.YELLOW)
    elif game_state.iq >= 50:
        type_writter("😐 Graduated", color=Fore.RED)
    else:
        type_writter("💀 Failed", color=Fore.RED)
    
    game_state.save_high_score(game_state.player_name, game_state.iq)
    type_writter("\nTop Scores:", color=Fore.YELLOW)
    for i, (name, score) in enumerate(game_state.high_scores[:5], 1):
        type_writter(f"{i}. {name}: {score}", color=Fore.CYAN)
    
    return input(Fore.YELLOW + "Play again? (y/n): ").lower() == 'y'

def use_item(item, iq):
    if item not in inventory:
        type_writter("Don't have that!", color=Fore.RED)
        return iq
    
    effects = {
        "energy drink": (20, "Energized! +20 IQ"),
        "sandwich": (10, "Restored! +10 IQ"),
        "espresso": (5, "Alert! +5 IQ"),
        "flashlight": (0, "Lights path"),
        "master key": (0, "Opens door"),
        "lucky lure": (0, "Next question hint"),
        "compass": (0, "No more lost")
    }
    
    for name, (bonus, msg) in effects.items():
        if name in item.lower():
            type_writter(msg, color=Fore.GREEN)
            if bonus > 0:
                inventory.remove(item)
            return iq + bonus
    
    type_writter(f"Can't use {item} here!", color=Fore.RED)
    return iq

def catch_game():
    W, H = 20, 10
    pos = W // 2
    score = 0
    diplomas = []
    lives = 3
    
    def draw():
        os.system('cls' if os.name == 'nt' else 'clear')
        print(f"Score: {score} Lives: {'❤️' * lives}")
        for y in range(H):
            print("".join("📜" if [x,y] in diplomas else
                         "🏃" if y==H-1 and x==pos else " " for x in range(W)))
        print("=" * W)
        print("a=left, d=right, q=quit")

    type_writter("\nCatch diplomas for IQ!", color=Fore.YELLOW)
    countdown(3, "Go!")
    
    while lives > 0:
        if random.random() < 0.2:
            diplomas.append([random.randint(0,W-1),0])
            
        for d in diplomas[:]:
            d[1] += 1
            if d[1] >= H:
                diplomas.remove(d)
                lives -= 1
                
        draw()
        try:
            key = input().lower()
            if key == 'a' and pos > 0: pos -= 1
            elif key == 'd' and pos < W-1: pos += 1
            elif key == 'q': break
        except:
            pass
            
        for d in diplomas[:]:
            if d[1] == H-1 and d[0] == pos:
                diplomas.remove(d)
                score += 1
                
    return score


def catch_game():
    W, H = 20, 10
    pos = W // 2
    score = lives = 3
    
    def draw():
        os.system('cls' if os.name == 'nt' else 'clear')
        print(f"Score: {score} Lives: {'❤️' * lives}")
        for y in range(H):
            line = ["📜" if [x,y] in diplomas else 
                   "🏃" if y==H-1 and x==pos else " " for x in range(W)]
            print("".join(line))
        print("=" * W)
        print("a=left d=right q=quit")

    diplomas = []
    type_writter("\nCatch diplomas!", color=Fore.YELLOW)
    countdown(3, "Go!")

    while lives > 0:
        if random.random() < 0.2:
            diplomas.append([random.randint(0,W-1),0])
            
        for d in diplomas[:]:
            d[1] += 1
            if d[1] >= H:
                diplomas.remove(d)
                lives -= 1
                
        draw()
        try:
            key = input().lower()
            if key == 'a': pos = max(0, pos-1)
            elif key == 'd': pos = min(W-1, pos+1)
            elif key == 'q': break
        except:
            pass
            
        for d in diplomas[:]:
            if d[1] == H-1 and d[0] == pos:
                diplomas.remove(d)
                score += 1
                
    return score * 5

def explore_location(iq, game_state, locations, loc_name):
    loc_key = loc_name.lower().replace(" ", "")
    areas = game_state.completed_paths[loc_key]["areas"]
    
    while iq >= 50:
        available = [a for a in areas if not areas[a]]
        if not available:
            type_writter("Area complete!", color=Fore.GREEN)
            game_state.completed_paths[loc_key]["completed"] = True
            break
            
        type_writter(f"\n{loc_name} areas:", color=Fore.CYAN)
        for i, area in enumerate(available, 1):
            type_writter(f"{i}. {area.replace('_', ' ')}")
            
        choice = input(Fore.YELLOW + "\nChoose (or 'minigame'): ").lower()
        
        if choice == 'minigame':
            bonus = play_minigame()
            if bonus > 0:
                iq += bonus
                game_state.iq = iq
            continue
            
        try:
            current = available[int(choice)-1]
        except:
            type_writter("Invalid!", color=Fore.RED)
            continue
            
        clear_system()
        type_writter(f"\n{locations[current]['desc']}")
        
        correct = 0
        while correct < 3 and iq >= 50:
            q, a = get_question(locations[current]['questions'], game_state.difficulty)
            type_writter(f"\n{q}", color=Fore.CYAN)
            
            if input(Fore.YELLOW + "Answer: ").lower() == a.lower():
                reward = random.choice(locations[current]['rewards'])
                inventory.append(reward)
                type_writter(f"Got {reward}!", color=Fore.GREEN)
                iq = adjust_iq(True, iq, game_state)
                correct += 1
            else:
                iq = adjust_iq(False, iq, game_state)
                
            type_writter(f"IQ: {iq}", color=Fore.YELLOW)
            pause_line()
            clear_system()
        
        areas[current] = True
        
        if random.random() < 0.4:
            win, iq = fight("Enemy", iq, game_state)
        elif random.random() < 0.5:
            bonus = catch_game()
            if bonus > 0:
                iq += bonus
                game_state.iq = iq
            
    return iq

def main():
    try:
        while True:
            game_state = GameState()
            clear_system()
            
            name = input(Fore.YELLOW + "Name: ").upper() or "PLAYER"
            game_state.player_name = name
            
            intro(name, game_state)
            if not ending(game_state):
                break
    except KeyboardInterrupt:
        type_writter("\nGame stopped", color=Fore.YELLOW)
    finally:
        print(Fore.YELLOW + "\nThanks for playing!")

def show_iq_status(iq):
    type_writter(f"\nIQ: {iq}", color=Fore.YELLOW)
    if iq >= 150: status = "Valedictorian! 🌟"
    elif iq >= 120: status = "Honors! 🎉"
    elif iq >= 100: status = "Graduating 😐"
    elif iq <= 200: status = "Really smart! 😀"
    elif iq <= 250: status = "Harvard wants you 😭"
    elif iq <= 350: status = "Smartest ever? ☠️"
    elif iq >= 500: status = "You win 🎗️"
    else: status = "Might fail! ⚠️"
    type_writter(status, color=Fore.CYAN)

if __name__ == "__main__":
    main()
